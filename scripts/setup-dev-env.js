#!/usr/bin/env node

/**
 * Development Environment Setup Script
 * Helps configure the frontend for independent development
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const ENV_FILE = '.env.local';

console.log('🚀 AdCopy Frontend Development Setup\n');

async function setupEnvironment() {
  console.log('This script will help you configure your development environment.\n');

  const useMockApi = await askQuestion('Do you want to use mock APIs for independent development? (y/n): ');
  const mockMode = useMockApi.toLowerCase() === 'y' || useMockApi.toLowerCase() === 'yes';

  let envContent = `# AdCopy Development Configuration
# Generated by setup script

# ===================
# DEVELOPMENT MODE
# ===================

# Set to 'true' for independent development with mock APIs
# Set to 'false' when backend webhooks are ready
NEXT_PUBLIC_USE_MOCK_API=${mockMode}

# API Configuration
NEXT_PUBLIC_API_BASE_URL=/api

`;

  if (!mockMode) {
    console.log('\n🔗 Backend Webhook Configuration:');
    const signinWebhook = await askQuestion('Enter your signin webhook URL (or press Enter to skip): ');
    const signupWebhook = await askQuestion('Enter your signup webhook URL (or press Enter to skip): ');
    const verifyWebhook = await askQuestion('Enter your verification webhook URL (or press Enter to skip): ');

    envContent += `# ===================
# BACKEND WEBHOOKS
# ===================
# Your backend developer will provide these URLs

`;

    if (signinWebhook) {
      envContent += `NEXT_PUBLIC_SIGNIN_WEBHOOK=${signinWebhook}\n`;
    } else {
      envContent += `# NEXT_PUBLIC_SIGNIN_WEBHOOK=https://your-n8n-instance/webhook/signin\n`;
    }

    if (signupWebhook) {
      envContent += `NEXT_PUBLIC_SIGNUP_WEBHOOK=${signupWebhook}\n`;
    } else {
      envContent += `# NEXT_PUBLIC_SIGNUP_WEBHOOK=https://your-n8n-instance/webhook/signup\n`;
    }

    if (verifyWebhook) {
      envContent += `NEXT_PUBLIC_VERIFY_WEBHOOK=${verifyWebhook}\n`;
    } else {
      envContent += `# NEXT_PUBLIC_VERIFY_WEBHOOK=https://your-n8n-instance/webhook/verify\n`;
    }
  } else {
    envContent += `# ===================
# BACKEND WEBHOOKS
# ===================
# Uncomment and configure when backend is ready

# NEXT_PUBLIC_SIGNIN_WEBHOOK=https://your-n8n-instance/webhook/signin
# NEXT_PUBLIC_SIGNUP_WEBHOOK=https://your-n8n-instance/webhook/signup
# NEXT_PUBLIC_VERIFY_WEBHOOK=https://your-n8n-instance/webhook/verify

`;
  }

  envContent += `# ===================
# PRODUCTION CONFIG
# ===================
# n8n Configuration (for server-side)
N8N_BASE_URL=http://localhost:5678
`;

  // Write environment file
  fs.writeFileSync(ENV_FILE, envContent);

  console.log(`\n✅ Environment configuration saved to ${ENV_FILE}\n`);

  if (mockMode) {
    console.log('🧪 Mock API Mode Enabled:');
    console.log('   • Use test@example.com / password123 for sign in');
    console.log('   • All APIs will return mock responses');
    console.log('   • No backend dependency required');
    console.log('   • Perfect for UI development and testing\n');
  } else {
    console.log('🔗 Production API Mode Enabled:');
    console.log('   • Frontend will connect to real backend APIs');
    console.log('   • Make sure your backend developer provides webhook URLs');
    console.log('   • Update .env.local with actual webhook URLs\n');
  }

  console.log('📋 Next Steps:');
  console.log('   1. npm run dev - Start development server');
  console.log('   2. Visit http://localhost:3000');
  console.log('   3. Test signup/signin flows');
  
  if (mockMode) {
    console.log('   4. When backend is ready, run this script again to switch modes\n');
  } else {
    console.log('   4. Coordinate with backend developer for webhook URLs\n');
  }

  console.log('📖 For more details, see DEVELOPMENT_GUIDE.md');
}

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Handle graceful exit
process.on('SIGINT', () => {
  console.log('\n👋 Setup cancelled');
  rl.close();
  process.exit(0);
});

// Run setup
setupEnvironment()
  .then(() => {
    rl.close();
  })
  .catch((error) => {
    console.error('❌ Setup failed:', error);
    rl.close();
    process.exit(1);
  });






